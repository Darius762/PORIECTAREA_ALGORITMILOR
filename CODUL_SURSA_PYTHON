
//Cod sursă Python pentru algoritmul recursiv:
    
def cut_rod_rec(prices, length):
    if length <= 0:
        return 0
    
    max_val = -1
    for i in range(length):
        val = prices[i] + cut_rod_rec(prices, length - i - 1)
        max_val = max(max_val, val)
    
    return max_val

length = int(input("Introdu lungimea tijei: "))
prices = []
print("Introdu preturile pentru fiecare lungime de tija:")
for i in range(length):
    price = int(input(f"Pret pentru lungimea {i + 1}: "))
    prices.append(price)

max_income = cut_rod_rec(prices, length)
print(f"Venitul maxim obtinut este: {max_income}")


//Cod sursă Python pentru algoritmul de programare dinamică:
    
def cut_rod_dp(prices, length):
    dp = [0] * (length + 1)
    
    for i in range(1, length + 1):
        max_val = -1
        for j in range(i):
            max_val = max(max_val, prices[j] + dp[i - j - 1])
        dp[i] = max_val
    
    return dp[length]

length = int(input("Introdu lungimea tijei: "))
prices = []
print("Introdu preturile pentru fiecare lungime de tija:")
for i in range(length):
    price = int(input(f"Pret pentru lungimea {i + 1}: "))
    prices.append(price)

max_income = cut_rod_dp(prices, length)
print(f"Venitul maxim obtinut este: {max_income}")


